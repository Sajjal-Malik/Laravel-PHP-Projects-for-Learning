Great! Here's a detailed description of Task 5 based on your setup, previous progress, and new concepts — clearly structured so you can build it step-by-step from scratch.

✅ Task 5: Artisan Custom Commands and Queues — Combined with Task 3 & Task 4
📦 Core Objectives
Learn how to:
    Create custom artisan commands.

    Use Laravel's scheduler for periodic tasks.

    Queue and send emails efficiently.

    Seed realistic fake data (users, companies, employees) with images.

    Refactor everything under the admin route prefix.

    Replace email-based login with username.

    Display data using Yajra DataTables.


🧠 Concepts & Features to Learn in This Task
Feature	Description
    1. Custom Artisan Command: database:create	A custom command that creates a new MySQL database dynamically from CLI (e.g., php artisan database:create my_db_name).
    2. Custom Command: db:dump	Another custom artisan command to run migrate:fresh and db:seed in one go, simplifying database refresh.
    3. Alter status Column	In users table, update the status enum values from (active, inactive) to (Active, Blocked) and update all logic/UI accordingly.
    4. Factory with File Upload	Generate N fake users, companies, and employees using Laravel factories. Use your existing FileUploadTrait for attaching random logos and photos.
    5. Route Prefixing	All routes should now be grouped under admin (e.g., /admin/users, /admin/employees). Use Laravel route groups for this.
    6. Login with Username	Override Laravel Fortify to allow user login with username instead of email. Update login form, config, and authentication logic.
    7. Queued Mail	Use Laravel Queues to send a welcome mail (via UserCreated) to selected users asynchronously.
    8. Scheduled Mail Every 24 Hours	Use Laravel Task Scheduling to send queued email to all users every 24 hours. Could be a reminder or a custom notification.
    9. Yajra DataTables	All lists (users, employees, companies) should now use Yajra DataTables for dynamic, paginated tables with AJAX.


🧱 Combined Architecture Summary
    Area	Description
    Auth	Laravel Fortify customized to use username field.
    Middlewares	You correctly use CheckRole as 'role' and CheckBlocked as 'isActive' middleware.
    Mail/Event	One UserCreated event+mail class handles all user-related mails (no duplication).
    Uploads	One FileUploadTrait handles both company logos and user photos.
    DataTables	Use Yajra for users, companies, and employees. Employees are users with role = 2.
    Project Bootstrapping	New project to be built from scratch, applying all best practices learned so far.


🧭 Suggested Order of Development
    New Laravel Project + AdminLTE UI

    Migrations + Models (with camelCase columns)

    Fortify Setup with Username Login

    Middleware (role, isActive)

    Factory Setup (User, Company, with image using FileUploadTrait)

    Custom Artisan Commands

    database:create

    db:dump

    Event + Listener for UserCreated + Queue Setup

    Schedule Task: Mail All Users Every 24 Hrs

    Seed Fake Records (with images and logos)

    Yajra DataTables for All Lists

    Route Grouping: Route::prefix('admin')->group(...)


✅ Your Existing Reusables
    Component	Already Created
    FileUploadTrait	✔ (reused for both logos and photos)
    UserCreated Event & Listener	✔
    Middleware CheckBlocked, CheckRole	✔ Registered as 'isActive', 'role'
    Factory + Seeder (users, companies)	✔ (extend to include image upload)
    Mailtrap Config	✔

🎯 Final Outcome
    You will build a professional-level Laravel 10 project that:

    Automates database setup and refresh.

    Sends queued, scheduled emails.

    Uses username-based login.

    Displays everything in dynamic DataTables.

    Uses a single unified logic for users and employees.

    Stays clean with Laravel's best practices (traits, services, DI, events, queues, etc).

Let me know when you're ready and I’ll walk you through step-by-step from project creation. You can also try on your own and bring me errors for help.

You said: Make this detail in step by step form and with the flow and show files


📁 Folder and File Organization (Simplified)
    app/
    ├── Console/
    │   ├── Commands/
    │   │   ├── CreateDatabase.php
    │   │   └── DumpDatabase.php
    ├── Events/
    │   └── UserCreated.php
    ├── Listeners/
    │   └── SendUserCreatedMail.php
    ├── Traits/
    │   └── FileUploadTrait.php
    database/
    ├── factories/
    │   ├── UserFactory.php
    │   └── CompanyFactory.php
    routes/
    └── web.php  (with /admin prefix)
    resources/views/
    └── admin/
        ├── users/
        ├── employees/
        └── companies/




✅ Task 5: Artisan Custom Commands and Queues — Combined with Task 3 & Task 4 (Initializing)
1 . Kick-start the project
    laravel new task5_project
    cd task5_project

# Auth kit
    composer require laravel/fortify
    php artisan vendor:publish --provider="Laravel\\Fortify\\FortifyServiceProvider"

# DataTables (server-side)
    composer require yajra/laravel-datatables-oracle:"~10.0"

# Queue table
    php artisan queue:table
    php artisan migrate


2 . Users table & auth tweaks
2-a Migration – users
    php artisan make:migration modify_users_for_task5 --table=users

    // database/migrations/xxxx_xx_xx_modify_users_for_task5.php
    public function up()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->string('username')->unique()->after('id');
            $table->enum('status', ['Active', 'Blocked'])->default('Active')->change();
            $table->unsignedTinyInteger('role')->default(2)->after('status');    // 1=Admin, 2=User/Employee
            $table->string('photo')->nullable()->after('email');                // handled by FileUploadTrait
        });
    }

    php artisan migrate


2-b Fortify → username login
// config/fortify.php
    'username' => 'username',

    // app/Providers/FortifyServiceProvider.php  (inside boot)
        Fortify::authenticateUsing(function (Request $request) {
            $user = User::where('username', $request->username)->first();
            return ($user && Hash::check($request->password, $user->password)) ? $user : null;
        });

Reference: username-based login pattern is unchanged since L10 — see community guides. 
geoamins.com

Update resources/views/auth/login.blade.php to use a username <input> instead of email.


3 . Global middlewares (already written)
// app/Http/Kernel.php
'role'     => \App\Http\Middleware\CheckRole::class,
'isActive' => \App\Http\Middleware\CheckBlocked::class,
No code change needed – just keep them.


4 . One FileUploadTrait for all images
// app/Traits/FileUploadTrait.php
namespace App\Traits;

use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

    trait FileUploadTrait
    {
        public function uploadFile(?UploadedFile $file, string $folder): ?string
        {
            if (!$file) {
                return null;
            }
            $path = $file->store("public/$folder");
            return basename($path);        // store filename only
        }

        /** Helper for factories (copy stub images from database/factories/images/) */
        protected function uploadFileFromFactory(string $stubFile, string $folder): string
        {
            $tmp = Storage::disk('public')->putFileAs(
                $folder,
                database_path("factories/images/$stubFile"),
                uniqid() . '_' . $stubFile
            );
            return basename($tmp);
        }
    }


5 . Factories & seeders with images
    php artisan make:factory UserFactory --model=User
    php artisan make:factory CompanyFactory

// database/factories/UserFactory.php
    class UserFactory extends Factory
    {
        use FileUploadTrait;

        public function definition()
        {
            return [
                'firstName'     => $this->faker->firstName,
                'lastName'     => $this->faker->lastName,
                'username' => $this->faker->unique()->userName,
                'email'    => $this->faker->safeEmail,
                'password' => bcrypt('password'),
                'status'   => 'Active',
                'role'     => 2,
                'photo'    => $this->uploadFileFromFactory('user.jpg', 'photos'),
            ];
        }
    }
Add 1 admin + N dummy users in DatabaseSeeder.


6 . Route prefix /admin
// routes/web.php
    Route::prefix('admin')->middleware(['auth', 'isActive'])->group(function () {
        Route::middleware('role:1')->group(function () {
            Route::resource('users',     Admin\UserController::class);
            Route::resource('companies', Admin\CompanyController::class);
            // employees = users where role=2 → handled in UserController
        });
    });


7 . Custom artisan commands
7-a Create database
    php artisan make:command CreateDatabase

// app/Console/Commands/CreateDatabase.php
    protected $signature = 'database:create {name}';
    public function handle()
    {
        $name = $this->argument('name');
        config(['database.connections.mysql.database' => null]);      // detach
        DB::statement("CREATE DATABASE IF NOT EXISTS `$name`");
        $this->info("Database [$name] created.");
    }


7-b Fresh + seed in one go
    php artisan make:command dbDump

    protected $signature = 'db:dump';
    public function handle()
    {
        $this->call('migrate:fresh', ['--seed' => true]);
        $this->info('DB migrated & seeded.');
    }

Register both in app/Console/Kernel.php.
Laravel’s docs on writing commands remain unchanged. 
laravel.com


8 . Queue setup & UserCreated event
    .env: QUEUE_CONNECTION=database

Run:
    php artisan queue:table && php artisan migrate
    php artisan queue:work

Event & listener
php artisan make:event UserCreated
php artisan make:listener SendUserCreatedMail

// app/Listeners/SendUserCreatedMail.php
class SendUserCreatedMail implements ShouldQueue
{
    public function handle(UserCreated $event)
    {
        Mail::to($event->user->email)->queue(new UserCreatedMail($event->user));
    }
}

Laravel queue + mail is the same flow shown in tutorials. 
laraveldaily.com

Trigger the event wherever you create a user (UserRepository::store, factory seeder, etc.).

9 . Scheduler – mail every 24 h
// app/Console/Kernel.php
    protected function schedule(Schedule $schedule)
    {
        $schedule->call(function () {
            User::where('status', 'Active')->chunkById(100, function ($users) {
                foreach ($users as $u) {
                    Mail::to($u->email)->queue(new UserCreatedMail($u));
                }
            });
        })->daily();   // midnight by default
    }

Run the scheduler:
    php artisan schedule:work      # local

# or setup cron: * * * * * php /path/to/artisan schedule:run >> /dev/null 2>&1
Daily scheduled queue pattern is standard. 
stackoverflow.com


10 . Yajra DataTables stubs
// app/Http/Controllers/Admin/UserController.php
public function index(Request $request)
{
    if ($request->ajax()) {
        $query = User::query();
        return DataTables::of($query)
            ->addColumn('action', fn($u) => view('admin.users.partials.action', compact('u')))
            ->make(true);
    }
    return view('admin.users.index');
}
resources/views/admin/users/index.blade.php just holds <table id="users-table"> and DataTable JS.

11 . Run it all

# Create a DB quickly
    php artisan database:create task5_db

# .env → DB_DATABASE=task5_db, run migrations/seeds
    php artisan db:dump             # fresh + seed

# Start queues & scheduler (in two terminals)
    php artisan queue:work
    php artisan schedule:work

# Serve app
    php artisan serve