# Laravel Project Task 3 & 4: Full Detailed Description & Implementation Flow

## Combined Objectives:

This documentation explains the **combined goals, implementation steps, file structure, and logic** for **Task 3: User Auth, Middleware, and Company/Employee Management** and **Task 4: Repository Pattern, Dependency Injection, and AdminLTE Theme**.

---

## üß© Project Overview

### üõ†Ô∏è Technologies and Packages Used:

    * Laravel 10
    * Laravel Fortify for Authentication
    * Yajra DataTables for server-side table rendering
    * AdminLTE Theme (for UI)
    * jQuery + AJAX + Parsley.js (for frontend interaction + validation)
    * Mailtrap (for testing email notifications)
    * Repository Pattern + Dependency Injection (for service abstraction)
    * Event & Listener (for sending emails)
    * Traits for File Uploads

---

## üóÇÔ∏è Database Tables:

### `users` Table (Merged Admin and Employees)

| Column    | Type          | Description                           |
| --------- | ------------- | ------------------------------------- |
| id        | bigIncrements | Primary Key                           |
| firstName | string        | First Name of user/employee           |
| lastName  | string        | Last Name of user/employee            |
| email     | string        | Unique Email                          |
| password  | string        | Hashed Password                       |
| role      | tinyInteger   | 1 = Admin, 2 = Employee               |
| isBlocked | boolean       | 0 = Active, 1 = Blocked               |
| empPhoto  | string        | (nullable) Employee Photo path        |
| companyId | foreignId     | (nullable for Admins) FK to companies |
| createdAt | timestamp     | Created time                          |
| updatedAt | timestamp     | Updated time                          |

### `companies` Table

| Column  | Type          | Description                    |
| ------- | ------------- | ------------------------------ |
| id      | bigIncrements | Primary Key                    |
| name    | string        | Required                       |
| email   | string        | Optional                       |
| website | string        | Optional                       |
| logo    | string        | Stored in `storage/app/public` |

---

## üìÅ Folder & File Structure

### Models

    * `App\Models\User`
    * `App\Models\Company`

### Migrations & Seeders and Factory

    * `create_users_table.php`
    * `create_companies_table.php`
    * `UserFactory.php`
    * `CompanyFactory.php`
    * `UserSeeder.php`
    * `CompanySeeder.php`

### Middleware

* `CheckBlocked.php`: blocks login if user is inactive
* `CheckRole.php`: handles multiple role-based route protections


### Middleware Register: (app/Http/Kernel.php)
        'role' => \App\Http\Middleware\CheckRole::class,
        'isActive' => \App\Http\Middleware\CheckBlocked::class,

### Routes (`routes/web.php`)

```php
Route::middleware(['auth', 'isActive'])->group(function () {

    Route::middleware(['role:1'])->group(function () {

        Route::get('/dashboard', function () {
            return view('dashboard');
        })->name('dashboard');

        
        Route::get('/users', [UserController::class, 'index'])->name('users.index');
        Route::post('/users/status/{id}', [UserController::class, 'toggleBlock'])->name('users.toggleBlock');
        Route::get('/users/create', [UserController::class, 'create'])->name('users.create');
        Route::post('/users', [UserController::class, 'store'])->name('users.store');

        
        Route::get('/companies', [CompanyController::class, 'index'])->name('companies.index');
        Route::get('/companies/create', [CompanyController::class, 'create'])->name('companies.create');
        Route::post('/companies', [CompanyController::class, 'store'])->name('companies.store');
        Route::get('/companies/{id}', [CompanyController::class, 'show'])->name('companies.show');
        Route::get('/companies/{id}/edit', [CompanyController::class, 'edit'])->name('companies.edit');
        Route::put('/companies/{id}', [CompanyController::class, 'update'])->name('companies.update');
        Route::delete('/companies/{id}', [CompanyController::class, 'destroy'])->name('companies.destroy');

        
        Route::get('/employees', [UserController::class, 'employeeIndex'])->name('employees.index');
        Route::get('/employees/create', [UserController::class, 'employeeCreate'])->name('employees.create');
        Route::post('/employees', [UserController::class, 'employeeStore'])->name('employees.store');
        Route::get('/employees/{id}', [UserController::class, 'employeeShow'])->name('employees.show');
        Route::get('/employees/{id}/edit', [UserController::class, 'employeeEdit'])->name('employees.edit');
        Route::put('/employees/{id}', [UserController::class, 'employeeUpdate'])->name('employees.update');
        Route::delete('/employees/{id}', [UserController::class, 'employeeDestroy'])->name('employees.destroy');
    });
});
```

### Fortify Setup

* Customized `FortifyServiceProvider` to override login and registration logic
* Uses `CreateNewUser` to Validate and create user using Fortify's structure

### Controllers

* `UserController.php`: Handles both Admin-created users and Employees
* `CompanyController.php`: Full CRUD for company module

### Views

* `layouts/app.blade.php` (AdminLTE based)
* `auth/login.blade.php`
* `auth/register.blade.php`
* `users/index.blade.php` (user listing)
* `users/employees/index.blade.php`, `create.blade.php`, etc.
* `companies/index.blade.php`, `create.blade.php`, etc.

### Repositories
#### Repositories/Interfaces

* `UserRepositoryInterface`
* `CompanyRepositoryInterface`

#### Repositories/Repository

* `UserRepository.php`
  * create user using Fortify's `CreateNewUser`
  * handle employee photo uploads via `FileUploadTrait`
  * toggle block/unblock status

* `CompanyRepository.php`
  * handle logo uploads via `FileUploadTrait`

### Traits

* `FileUploadTrait.php`: used by `CompanyRepository, UserRepository`

### Event & Listener

* `UserCreated.php`
* `SendNewUserEmail.php`

* Email template: `resources/views/emails/users_created.blade.php`

### Mailtrap

Configured in `.env`:

```env
MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=your_username
MAIL_PASSWORD=your_password
```

---

## üß™ Seeder Setup

### `UserSeeder.php`

* Creates 1 Super Admin manually
* Creates 10 Employees with factory and links them to first available company

### `CompanySeeder.php`

* Creates a default company with a logo

---

## üîê Middleware Logic Flow

    1. All protected routes are behind `auth` middleware
    2. `check.admin` checks if the logged-in user is an admin
    3. `role:1` ensures only Admin can access employee/user/company management
    4. `CheckBlocked` prevents blocked users from accessing login session

---

## üì¨ Email Notifications

* When a user or employee is created, `UserCreated` event is fired.
* `SendNewUserEmail` listener sends email using Laravel Mailable.

---

## ‚öôÔ∏è DataTables Integration

* Used for all listings: `users`, `employees`, `companies`
* Server-side rendering via Yajra DataTables in controller index methods
* AJAX route returns formatted table data

---

## üß† Best Practices Followed

* Clean separation of concerns using Repository Pattern
* Single controller (`UserController`) used for both admin users and employees
* Blade layouts follow AdminLTE structure
* Validation on both frontend (Parsley.js) and backend (Form Requests / Fortify)
* Secure password storage and user registration using Fortify
* Email notifications handled using Laravel Event & Listener
* File uploads handled using Traits
* Custom error handling and logs for each catch block

---

## ‚úÖ Final Deliverables Summary

| Module       | Path / Feature                      |
| ------------ | ----------------------------------- |
| Auth         | Login, Register (Fortify)           |
| Middleware   | Auth, Role, Blocked checks          |
| User Manage  | CRUD (Admin), Toggle Block (AJAX)   |
| Employees    | CRUD via UserController (role = 2)  |
| Companies    | CRUD, Logo Upload                   |
| Repositories | User + Company abstraction layers   |
| Events/Email | On user/employee creation           |
| DataTables   | Server-side listing                 |
| UI           | AdminLTE UI Integration             |
| Seeder       | Admin + Employees + Default Company |

---

Let me know if you'd like this documented as a project README, PDF, or further expanded into tutorials for each file/module.
